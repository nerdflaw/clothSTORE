<!-- including admin head  -->
<%- include('../../partials/admin-partials/admin-head.ejs') %>

<body>

  <!-- including admin nav  -->
  <%- include('../../partials/admin-partials/admin-nav.ejs') %>

  <section>
    <h4 class="py-3 text-center text-black font-size-bold-title border-1 border-bottom m-0">Edit product</h4>
  </section>

  <form class="p-0 m-0" id="productForm" action="/admin-edit-product/<%-editProduct._id%>" method="POST" enctype="multipart/form-data">
    <div class="container-fluid">
      <div class="row">
        <div class="px-5 pt-3 col-md-6 col-xl-6 d-flex flex-column justify-content-start p-0 m-0">

          <% if (message) { %>
          <h6 id="flash" class="text-center text-danger animate__animated animate__flash font-size"><%= message %></h6>
          <% } %>

          <div class="mb-3 form-group">
            <div class="d-flex justify-content-between align-items-center">
              <label for="title" class="form-label text-black font-size">Title</label>
              <span id="title-available" class="font-size-bold"></span>
            </div>
            <!-- <input type="hidden" id="original-title"  value="<%-editProduct.title %>"> -->
            <input value="<%-editProduct.title %>" type="text" class="form-control bg-white text-black font-size" id="title" name="title" required>
          </div>

          <div class="mb-3 form-group">
            <label for="description" class="form-label text-black font-size">Description</label>
            <input value="<%-editProduct.description %>" type="text" class="form-control bg-white text-black font-size" id="description" name="description" required>
          </div>

          <div class="container m-0 p-0" id="variants-container">
            <% editProduct.variants.forEach(variant => { %>
            <div class="row w-100 variant border rounded-3 m-0 p-0">
              <div class="col-xl-4 py-2">
                <select class="form-select bg-white text-black font-size" name="color[]" required>
                  <option value="" disabled>Select a color</option>
                  <% colors.forEach(color => { %>
                  <option value="<%= color._id %>" <%= variant.color.toString() === color._id.toString() ? 'selected' : '' %>><%= color.color %></option>
                  <% }); %>
                  <% if (colors.length === 0) { %>
                  <option value="" disabled selected>No colors found</option>
                  <% } %>
                </select>
              </div>
              <div class="col-xl-4 py-2">
                <select class="form-select bg-white text-black font-size" name="size[]" required>
                  <option value="" disabled>Select a size</option>
                  <% sizes.forEach(size => { %>
                  <option value="<%= size._id %>" <%= variant.size.toString() === size._id.toString() ? 'selected' : '' %>><%= size.size %></option>
                  <% }); %>
                  <% if (sizes.length === 0) { %>
                  <option value="" disabled selected>No sizes found</option>
                  <% } %>
                </select>
              </div>
              <div class="col-xl-3 py-2">
                <input oninput="validateInputQty(this)" type="text" placeholder="Enter quantity" class="form-control bg-white text-black font-size m-0 " name="quantity[]" value="<%= variant.quantity %>" required>
              </div>
              <div class="col-xl-1 py-2 text-center">
                <button type="button" onclick="removeVariant(this)" class="btn border-0 delete-variant">
                  <i class="fa-solid fa-trash-can text-danger"></i>
                </button>
              </div>
            </div>
            <% }); %>
          </div>
          <div class="mb-3 d-flex justify-content-end">
            <button onclick="addVariant()" type="button" class="btn btn-danger my-3 px-5 py-2 text-white font-size-bold">Add Variant</button>
          </div>
        </div>
        <div class="px-5 pt-3 col-md-6 col-xl-6 d-flex flex-column justify-content-start border-1 border-end p-0 m-0">

          <% if (message) { %>
          <h6 id="flash" class="text-center text-danger animate__animated animate__flash font-size"><%= message %></h6>
          <% } %>

          <div class="mb-3">
            <label for="brand" class="form-label text-black font-size">Brand</label>
            <select class="form-select bg-white text-black font-size" id="brand" name="brand" required>
              <% if (brands.length > 0) { %>
              <% brands.forEach(brand => { %>
              <% if (brand.id === editProduct.brandName) { %>
              <option value="<%= brand._id %>" selected>
                <%= brand.brand %>
              </option>
              <% } else { %>
              <option value="<%= brand._id %>">
                <%= brand.brand %>
              </option>
              <% } %>
              <% }); %>
              <% } else { %>
              <option value="" disabled selected>No brand to show</option>
              <% } %>
            </select>
          </div>
          <div class="mb-3">
            <label for="category" class="form-label text-black font-size">Category</label>
            <select class="form-select bg-white text-black font-size" id="category" name="category" required>
              <% if (categories.length > 0) { %>
              <% categories.forEach(category => { %>
              <% if (category.id === editProduct.categoryName) { %>
              <option value="<%= category._id %>" selected>
                <%= category.category %>
              </option>
              <% } else { %>
              <option value="<%= category._id %>">
                <%= category.category %>
              </option>
              <% } %>
              <% }); %>
              <% } else { %>
              <option value="" disabled selected>No category to show</option>
              <% } %>
            </select>
          </div>
          <div class="mb-3 form-group">
            <label for="mrp" class="form-label text-black font-size">MRP</label>
            <input value="<%-editProduct.mrp%>" type="text" class="form-control bg-white text-black font-size" id="mrp" name="mrp" required>
          </div>

          <div class="container p-0 m-0">
            <div class="row w-100 p-3 m-0 border rounded-1 font-size d-flex justify-content-between">
              <div class="form-check col-sm-12 col-md-12 col-lg-3">
                <label class="m-0 p-0 form-check-label" for="flashsale">Flash sale</label>
                <input type="checkbox" class="form-check-input" id="flashsale" name="flashsale" <% if (editProduct.flashsale) { %>checked<% } %>>
              </div>
              <div class="form-check col-sm-12 col-md-12 col-lg-3">
                <label class="m-0 p-0 form-check-label" for="featured">Featured</label>
                <input type="checkbox" class="form-check-input" id="featured" name="featured" <% if (editProduct.featured) { %>checked<% } %>>
              </div>
              <!-- <div class="form-check col-sm-12 col-md-12 col-lg-3">
                <label class="m-0 p-0 form-check-label" for="newArrival">New arrivals</label>
                <input type="checkbox" class="form-check-input" id="newArrival" name="newArrival" <%# if (editProduct.newArrival) { %>checked<%# } %>>
              </div> -->
            </div>
          </div>
        </div>
      </div>


      <div class="row">
        <div class="col-12 d-flex flex-wrap p-0">

          <!-- unmatched search start -->
          <% if(editProduct.images.length > 0){ %>
          <% } else { %>
          <div class="w-100">
            <h6 class="text-black font-size p-2 animate__animated animate__flash" colspan="5"><em>no product images to show</em></h6>
          </div>
          <% } %>
          <% editProduct.images.forEach((image, index) => { %>
          <div class="px-5 pt-3 col-12 col-md-6 border-1 p-0 m-0">
            <div class="mb-3 col-12 d-flex flex-column align-items-center border rounded-3">
              <div class="row w-100 d-flex justify-content-around p-3">
                <div class="col d-flex flex-column justify-content-center align-items-center border rounded-3 position-relative">
                  <label for="productImage<%= index + 1 %>" class="form-label text-black font-size px-3 py-3">Existing Product Image <%= index + 1 %></label>
                  <img data-value="/productImages/<%= image %>" id="existingProductImage<%= index + 1 %>" class="img-fluid p-2" src="/productImages/<%= image %>" alt="<%= image %>" style="width: 200px; height:200px; object-fit: contain;">
                  <div>
                    <i class="fa-solid fa-file-pen border rounded-3 bg-black text-white position-absolute bottom-0 start-0 d-flex justify-content-center align-items-center" data-bs-toggle="modal" data-bs-target="#exampleModal<%= index + 1 %>" style="width: 40px; height: 40px;"></i>
                  </div>
                  <div style="display: none;" id="hideCancelSelection<%= index + 1 %>">
                    <i class="fa-solid fa-xmark border rounded-3 bg-black text-white position-absolute bottom-0 end-0 d-flex justify-content-center align-items-center"
                     style="width: 40px; height: 40px; " id="cancelSelection<%= index + 1 %>" onclick="cancelSelection('<%= index + 1 %>')"></i>
                  </div>
                </div>
              </div>
              <div class="row w-100">
              </div>
              <div class="modal fade" id="exampleModal<%= index + 1 %>" tabindex="-1" aria-labelledby="exampleModalLabel<%= index + 1 %>" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title font-size-bold text-primary" id="exampleModalLabel<%= index + 1 %>">Change Image</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      <div class="container-fluid m-0 p-0">
                        <div class="row w-100 m-0 p-0">
                          <div class="col m-0 p-0">
                            <input type="hidden" name="existingProductImage<%= index + 1 %>" value="<%= image %>">
                            <input onchange="showPreview('<%= index + 1 %>')" type="file" class="form-control bg-white text-black font-size m-0" id="productImage<%= index + 1 %>" name="newProductImage<%= index + 1 %>" accept="image/*">
                            <p class="text-primary fw-bold font-size py-2">Choose a new image or leave it empty to keep the existing one.</p>
                          </div>
                        </div>
                        <div class="row w-100 m-0 p-0">
                          <div class="col-md border rounded-3 m-0 p-0" style="display: none;" id="newImageContainer<%= index + 1 %>">
                            <img src="#" id="newImage<%= index + 1 %>" style="width: 100%; height: 300px; object-fit: contain;" alt="selected image">
                          </div>
                          <div class="col-md border rounded-3 m-0 p-0" style="display: none;" id="previewImageContainer<%= index + 1 %>">
                            <img src="#" id="previewImage<%= index + 1 %>" style="width: 100%; height: 300px; object-fit: contain;" alt="image preview">
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary font-size-bold" data-bs-dismiss="modal" id="cancelButton<%= index + 1 %>">Close</button>
                      <button type="button" class="btn btn-dark font-size-bold" id="cropButton<%= index + 1 %>" onclick="cropImage('<%= index + 1 %>')">Crop</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <% }) %>

          <script>
            var croppers = [];

            function showPreview(index) {
              let input = document.getElementById('productImage' + index);
              let newImage = document.getElementById('newImage' + index);
              let newImageContainer = document.getElementById('newImageContainer' + index);
              let image = input.files[0];

              if (image) {
                try {
                  let fileReader = new FileReader();
                  fileReader.onload = function(e) {
                    newImageContainer.style.display = 'block';
                    newImage.src = e.target.result;

                    // Initialize Cropper for the current image
                    var cropper = new Cropper(newImage, {
                      aspectRatio: NaN,
                      viewMode: 0,
                      background: false
                    });

                    // Store the Cropper instance in the croppers array
                    croppers[index - 1] = cropper;
                  };
                  fileReader.readAsDataURL(image);
                } catch (error) {
                  console.error('Error reading file:', error);
                }
              }
            }

            function cropImage(index) {
              var cropper = croppers[index - 1];
              let cropButton = document.getElementById('cropButton' + index);
              let existingProductImage = document.getElementById('existingProductImage' + index);
              let previewImage = document.getElementById('previewImage' + index);
              let previewImageContainer = document.getElementById('previewImageContainer' + index);
              let productImage = document.getElementById('productImage' + index)
              let cancelSelection = document.getElementById('cancelSelection' + index);
              let hideCancelSelection = document.getElementById('hideCancelSelection' + index);
              let croppedImageData = cropper.getCroppedCanvas().toDataURL('image/png');
              existingProductImage.src = '';
              if (cropper) {
                cropper.destroy();
              }
              cancelSelection.style.display = 'block'
              previewImageContainer.style.display = 'block';
              previewImage.src = croppedImageData;
              existingProductImage.src = croppedImageData;
              hideCancelSelection.style.display='block'

              // Convert the cropped image to a File object
              let croppedImageFile = URLToFile(croppedImageData, index);

              // Create a FileList indirectly using DataTransfer
              let dataTransfer = new DataTransfer();
              dataTransfer.items.add(croppedImageFile);

              // Assign the FileList to the files property of the input element
              productImage.files = dataTransfer.files;
              cropButton.style.display = 'none';              
            }

            function cancelSelection(index) {
              let existingProductImage = document.getElementById('existingProductImage' + index);
              let existingProductImageSrc = existingProductImage.getAttribute('data-value');
              let productImage = document.getElementById('productImage' + index);
              let cancelSelection = document.getElementById('cancelSelection' + index);
              let hideCancelSelection = document.getElementById('hideCancelSelection' + index);
              productImage.value = ''
              existingProductImage.src = existingProductImageSrc
              hideCancelSelection.style.display= 'none';
            }

            let URLToFile = (url, index) => {
              let arr = url.split(',');
              let mime = arr[0].match(/:(.*?);/);
              let data = arr[1];
              let dataString = atob(data);
              let length = dataString.length;
              let dataArr = new Uint8Array(length);
              while (length--) {
                dataArr[length] = dataString.charCodeAt(length);
              }
              let file = new File([dataArr], `croppedImage${index}.jpg`, {
                type: mime
              });
              return file;
            };
          </script>

        </div>
      </div>
    </div>

    <div class="col-12 d-flex justify-content-around align-items-center flex-wrap px-5">
      <div class="col-md-6 col-sm-12 d-flex justify-content-center align-items-center">
        <a class="btn btn-dark my-3 px-5 py-2 text-white font-size-bold" href="/admin-product-management">cancel</a>
      </div>
      <div class="col-md-6 col-sm-12 d-flex justify-content-center align-items-center">
        <button type="submit" id="target-button" class="btn btn-danger my-3 px-5 py-2 text-white font-size-bold submitButton">confirm</button>
      </div>
    </div>
  </form>

  <section>
    <script>
      function addVariant() {
        const container = document.getElementById('variants-container');
        const newVariant = container.children[0].cloneNode(true);
        container.appendChild(newVariant);

        // Enable delete button for all variants except the first one
        const deleteButtons = container.querySelectorAll('.delete-variant');
        deleteButtons.forEach((button, index) => {
          button.disabled = index === 0;
        });
      }

      function removeVariant(button) {
        const container = document.getElementById('variants-container');
        const variantToRemove = button.closest('.variant');

        if (container.contains(variantToRemove) && container.children.length > 1) {
          container.removeChild(variantToRemove);
        }
      }


      function validateInputQty(inputElement) {
        inputElement.value = inputElement.value.replace(/\D/g, '');
        const inputValue = parseInt(inputElement.value);

        if (isNaN(inputValue) || inputValue < 0) {
          inputElement.classList.remove('valid');
          inputElement.classList.add('invalid');
        } else {
          inputElement.value = inputValue === 0 ? '' : inputValue.toString();
          inputElement.classList.remove('invalid');
          inputElement.classList.add('valid');
        }
      }
    </script>
      <!-- product availability check  debouncing for title -->
  <script>
    let titleEl = document.getElementById('title');
    let message = document.getElementById('title-available');
    let targetButton = document.getElementById('target-button');

    const sendDebounceTextToBackend = debounce(text => {
      let url = '/admin-add-product-check';
      fetch(url, {
          method: 'POST',
          body: JSON.stringify({
            text
          }),
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error('Network response was not ok.');
          }
        })
        .then(data => {
          if (data.status) {
            message.innerHTML = data.message;
            message.style.color = '#044604';
          } else {
            message.innerHTML = data.message;
            message.style.color = 'red';
            targetButton.setAttribute('disabled', 'disabled');
          }
        })
        .catch(error => {
          console.error('Error sending data to backend:', error);
        });
    });

    titleEl.addEventListener('input', (e) => {
      sendDebounceTextToBackend(e.target.value);
    });

    function debounce(callback, delay = 1000) {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => callback(...args), delay);
      };
    }
  </script>
  </section>

  <!-- including admin footer  -->
  <%- include('../../partials/admin-partials/admin-footer.ejs') %>

</body>

</html>